{"version":3,"sources":["constants/routes.js","context/firebase.js","lib/firebase.js","context/user.js","helpers/ProtectedRoute.js","helpers/isUserLoggedIn.js","App.js","hooks/useAuthListener.js","index.js"],"names":["DASHBOARD","LOGIN","SIGN_UP","PROFILE","PROFILE_EDIT","SEARCH","MESSAGES","NOT_FOUND","FirebaseContext","createContext","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FieldValue","firestore","UserContext","ProtectedRoute","user","children","rest","render","location","to","pathname","ROUTES","state","from","IsUserLoggedIn","loggedInPath","console","log","Login","lazy","SignUp","DashBoard","Profile","ProfileEdit","Search","Messages","NotFound","App","useState","JSON","parse","localStorage","getItem","setUser","useContext","useEffect","listener","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem","useAuthListener","Provider","value","fallback","className","path","component","exact","ReactDOM","document","getElementById"],"mappings":"mGAAA,gRAAO,IAAMA,EAAY,IACZC,EAAQ,SACRC,EAAU,WACVC,EAAU,eACVC,EAAe,kBACfC,EAAS,UACTC,EAAW,YACXC,EAAY,c,gCCPzB,WAEMC,EAAkBC,wBAAc,MACvBD,O,gCCHf,gFAcME,GAdN,YAciBC,IAASC,cATX,CACXC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,+CAIHC,EAAeR,IAASS,UAAxBD,Y,gCCfR,WAEME,EAAcZ,wBAAc,MACnBY,O,0KCCA,SAASC,EAAT,GAAsD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAaC,EAAQ,mCAEhE,OACI,cAAC,IAAD,2BACQA,GADR,IAEIC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACP,OAAIJ,EACOC,EAEND,EAUE,KARC,cAAC,IAAD,CACIK,GAAI,CACAC,SAAUC,IACVC,MAAO,CAAEC,KAAML,UCfhC,SAASM,EAAT,GAAoE,IAA1CV,EAAyC,EAAzCA,KAAMW,EAAmC,EAAnCA,aAAcV,EAAqB,EAArBA,SAAaC,EAAQ,kDAG9E,OADAU,QAAQC,IAAI,OAAQX,GAEhB,cAAC,IAAD,2BACQA,GADR,IAEIC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACP,OAAKJ,EAGDA,EAEI,cAAC,IAAD,CACIK,GAAI,CACAC,SAAUK,EACVH,MAAO,CAAEC,KAAML,MAKxB,KAZIH,MCH3B,IAAMa,EAAQC,gBAAK,kBAAM,kCACnBC,EAASD,gBAAK,kBAAM,wDACpBE,EAAYF,gBAAK,kBAAM,qEACvBG,EAAUH,gBAAK,kBAAM,qEACrBI,EAAcJ,gBAAK,kBAAM,uDACzBK,EAASL,gBAAK,kBAAM,8DACpBM,EAAWN,gBAAK,kBAAM,wDACtBO,EAAWP,gBAAK,kBAAM,wDA+BbQ,MA7Bf,WAAgB,IACJvB,ECfG,WAA4B,IAAD,EACdwB,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,cAD3B,mBAC/B5B,EAD+B,KACzB6B,EADyB,KAE9B1C,EAAa2C,qBAAW7C,KAAxBE,SAeR,OAdA4C,qBAAU,WACN,IAAMC,EAAW7C,EAAS8C,OAAOC,oBAAmB,SAACC,GAE7CA,GACAR,aAAaS,QAAQ,WAAYX,KAAKY,UAAUF,IAChDN,EAAQM,KAGRR,aAAaW,WAAW,YACxBT,EAAQ,UAGhB,OAAO,kBAAMG,OACd,CAAC7C,IACG,CAAEa,QDFQuC,GAATvC,KAER,OACI,cAAC,IAAYwC,SAAb,CAAsBC,MAAO,CAAEzC,QAA/B,SACI,cAAC,IAAD,UACI,cAAC,WAAD,CAAU0C,SAAU,mBAAGC,UAAU,+CAAb,wBAApB,SACI,eAAC,IAAD,WACI,cAACjC,EAAD,CAAgBV,KAAMA,EAAMW,aAAcJ,IAAkBqC,KAAMrC,IAAlE,SACI,cAAC,IAAD,CAAOqC,KAAMrC,IAAcsC,UAAW/B,MAE1C,cAACJ,EAAD,CAAgBV,KAAMA,EAAMW,aAAcJ,IAAkBqC,KAAMrC,IAAlE,SACI,cAAC,IAAD,CAAOqC,KAAMrC,IAAgBsC,UAAW7B,MAE5C,cAACjB,EAAD,CAAgBC,KAAMA,EAAM4C,KAAMrC,IAAkBuC,OAAK,EAAzD,SACI,cAAC7B,EAAD,MAEJ,cAAC,IAAD,CAAO2B,KAAMrC,IAAgBsC,UAAW3B,IACxC,cAAC,IAAD,CAAO0B,KAAMrC,IAAqBsC,UAAW1B,IAC7C,cAAC,IAAD,CAAOyB,KAAMrC,IAAesC,UAAWzB,IACvC,cAAC,IAAD,CAAOwB,KAAMrC,IAAiBsC,UAAWxB,IACzC,cAAC,IAAD,CAAOwB,UAAWvB,c,QE/B1CyB,IAAS5C,OACL,cAAC,IAAgBqC,SAAjB,CAA0BC,MAAO,CAAEtD,aAAUS,gBAA7C,SACI,cAAC,EAAD,MAEJoD,SAASC,eAAe,W","file":"static/js/main.812ab457.chunk.js","sourcesContent":["export const DASHBOARD = '/';\nexport const LOGIN = '/login';\nexport const SIGN_UP = '/sign-up';\nexport const PROFILE = '/p/:username';\nexport const PROFILE_EDIT = '/edit/:username';\nexport const SEARCH = '/search';\nexport const MESSAGES = '/messages';\nexport const NOT_FOUND = '/not-found';\n","import { createContext } from 'react';\n\nconst FirebaseContext = createContext(null);\nexport default FirebaseContext;\n","import Firebase from 'firebase';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n// import { seedDatabase } from '../seed';\n\nconst config = {\n    apiKey: 'AIzaSyDYOC4vSoKt8A2qLzIqw1A_BYTrqLAbFLk',\n    authDomain: 'artisto-rki.firebaseapp.com',\n    projectId: 'artisto-rki',\n    storageBucket: 'artisto-rki.appspot.com',\n    messagingSenderId: '960656414320',\n    appId: '1:960656414320:web:76f34788ac2ca4954d46b5',\n};\n\nconst firebase = Firebase.initializeApp(config);\nconst { FieldValue } = Firebase.firestore;\n\nexport { firebase, FieldValue };\n\n// seedDatabase(firebase);\n","import { createContext } from 'react';\n\nconst UserContext = createContext(null);\nexport default UserContext;\n","import PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\n\nexport default function ProtectedRoute({ user, children, ...rest }) {\n    // children = dashboard\n    return (\n        <Route\n            {...rest}\n            render={({ location }) => {\n                if (user) {\n                    return children;\n                }\n                if (!user) {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: ROUTES.LOGIN,\n                                state: { from: location },\n                            }}\n                        />\n                    );\n                }\n                return null;\n            }}\n        />\n    );\n}\n\nProtectedRoute.propTypes = {\n    user: PropTypes.object,\n    children: PropTypes.object.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport default function IsUserLoggedIn({ user, loggedInPath, children, ...rest }) {\n    // children = login / signin\n    console.log('rest', rest);\n    return (\n        <Route\n            {...rest}\n            render={({ location }) => {\n                if (!user) {\n                    return children;\n                }\n                if (user) {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: loggedInPath,\n                                state: { from: location },\n                            }}\n                        />\n                    );\n                }\n                return null;\n            }}\n        />\n    );\n}\n\nIsUserLoggedIn.propTypes = {\n    user: PropTypes.object,\n    loggedInPath: PropTypes.string.isRequired,\n    children: PropTypes.object.isRequired,\n};\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\nimport UserContext from './context/user';\nimport useAuthListener from './hooks/useAuthListener';\nimport ProtectedRoute from './helpers/ProtectedRoute';\nimport IsUserLoggedIn from './helpers/isUserLoggedIn';\n\nconst Login = lazy(() => import('./pages/Login'));\nconst SignUp = lazy(() => import('./pages/SignUp'));\nconst DashBoard = lazy(() => import('./pages/DashBoard'));\nconst Profile = lazy(() => import('./pages/Profile'));\nconst ProfileEdit = lazy(() => import('./pages/ProfileEdit'));\nconst Search = lazy(() => import('./pages/Search'));\nconst Messages = lazy(() => import('./pages/Messages'));\nconst NotFound = lazy(() => import('./pages/NotFound'));\n\nfunction App() {\n    const { user } = useAuthListener();\n\n    return (\n        <UserContext.Provider value={{ user }}>\n            <Router>\n                <Suspense fallback={<p className=\"text-gray-light text-center w-screen text-xl\">Loading...</p>}>\n                    <Switch>\n                        <IsUserLoggedIn user={user} loggedInPath={ROUTES.DASHBOARD} path={ROUTES.LOGIN}>\n                            <Route path={ROUTES.LOGIN} component={Login} />\n                        </IsUserLoggedIn>\n                        <IsUserLoggedIn user={user} loggedInPath={ROUTES.DASHBOARD} path={ROUTES.SIGN_UP}>\n                            <Route path={ROUTES.SIGN_UP} component={SignUp} />\n                        </IsUserLoggedIn>\n                        <ProtectedRoute user={user} path={ROUTES.DASHBOARD} exact>\n                            <DashBoard />\n                        </ProtectedRoute>\n                        <Route path={ROUTES.PROFILE} component={Profile} />\n                        <Route path={ROUTES.PROFILE_EDIT} component={ProfileEdit} />\n                        <Route path={ROUTES.SEARCH} component={Search} />\n                        <Route path={ROUTES.MESSAGES} component={Messages} />\n                        <Route component={NotFound} />\n                    </Switch>\n                </Suspense>\n            </Router>\n        </UserContext.Provider>\n    );\n}\n\nexport default App;\n","import { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from '../context/firebase';\n\nexport default function useAuthListener() {\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\n    const { firebase } = useContext(FirebaseContext);\n    useEffect(() => {\n        const listener = firebase.auth().onAuthStateChanged((authUser) => {\n            // we have a user... therefore we can store the user in localstorage\n            if (authUser) {\n                localStorage.setItem('authUser', JSON.stringify(authUser));\n                setUser(authUser);\n            } else {\n                // we don't have an authUser, therefore clear the localstorage\n                localStorage.removeItem('authUser');\n                setUser(null);\n            }\n        });\n        return () => listener();\n    }, [firebase]);\n    return { user };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport FirebaseContext from './context/firebase';\nimport { firebase, FieldValue } from './lib/firebase';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={{ firebase, FieldValue }}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}